<?php

/**
 * @file
 * Provides a tasks manager entity type.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function tasks_theme() {
  return [
    'tasks_manager' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for tasks manager templates.
 *
 * Default template: tasks-manager.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the tasks manager information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_tasks_manager(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['task']['id'] = $variables['elements']['#contextual_links']['tasks_manager']['route_parameters']['tasks_manager'];
  $variables['task']['add_time'] = false;
  if(thisTasksDev($variables['task']['id'], currentUserId()) == true) {
    $variables['task']['add_time'] = true;
  }
}

function currentUserId() {
  return \Drupal::currentUser()->id();
}

function thisTasksDev($taskId, $currentUser) {
  $entity = \Drupal::entityTypeManager()->getStorage('tasks_manager')
    ->load($taskId);
  $assignedFor = $entity->get('assigned_for')
  ->getValue()[0]['target_id'];
  if($assignedFor == $currentUser) {
    return true;
  }
  return false;
}
